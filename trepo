#!/usr/bin/env python
import os
import sys
import functools
from argparse import (ArgumentParser,
                      RawTextHelpFormatter)
import subprocess

def subparser(func):
    """docstring for subparser"""
    @functools.wraps(func)
    def wrapper(parser):
        splitted = func.__doc__.split('\n')
        name = func.__name__.split('_')[0]
        subparser = parser.add_parser(name, help=splitted[0],
                                      description='\n'.join(splitted[1:]),
                                      formatter_class=RawTextHelpFormatter)
        subparser.set_defaults(module='cmd_{0}'.format(name))
        return func(subparser)
    return wrapper

def cmd_init():
    """docstring for cmd_init"""
    print('cmd_init!')
    cwd = os.getcwd()
    subprocess.call(['{}/.trepo/repo'.format(cwd), 'init',
                     '--repo-url', '{}/.trepo/git-repo.git'.format(cwd),
                     '--repo-branch', 'stable'])

@subparser
def init_parser(parser):
    """docstring for init_parser"""

    # trepo
    group = parser.add_argument_group('trepo options')
    group.add_argument('-s', '--snapshot-version',
                       dest='snapshot_version',
                       help='snapshot version string', metavar='SNAPSHOT')

    # repo Manifest
    group = parser.add_argument_group('repo Manifest options')
    group.add_argument('-u', '--manifest-url',
                       dest='manifest_url',
                       help='manifest repository location', metavar='URL')
    group.add_argument('-b', '--manifest-branch',
                       dest='manifest_branch',
                       help='manifest branch or revision', metavar='REVISION')
    group.add_argument('-m', '--manifest-name',
                       dest='manifest_name',
                       help='initial manifest file', metavar='NAME.xml')
    group.add_argument('--mirror',
                       dest='mirror', action='store_true',
                       help='create a replica of the remote repositories '
                            'rather than a client working directory')
    group.add_argument('--reference',
                       dest='reference',
                       help='location of mirror directory', metavar='DIR')
    group.add_argument('--depth', type=int, default=None,
                       dest='depth',
                       help='create a shallow clone with given depth; see git clone')
    group.add_argument('--archive',
                       dest='archive', action='store_true',
                       help='checkout an archive instead of a git repository for '
                            'each project. See git archive.')
    group.add_argument('-g', '--groups',
                       dest='groups', default='default',
                       help='restrict manifest projects to ones with specified '
                            'group(s) [default|all|G1,G2,G3|G4,-G5,-G6]',
                       metavar='GROUP')
    group.add_argument('-p', '--platform',
                       dest='platform', default="auto",
                       help='restrict manifest projects to ones with a specified '
                            'platform group [auto|all|none|linux|darwin|...]',
                       metavar='PLATFORM')
    group.add_argument('--no-clone-bundle',
                       dest='no_clone_bundle', action='store_true',
                       help='disable use of /clone.bundle on HTTP/HTTPS')


def main(argv):
    """docstring for main"""
    description = 'tizen repo'
    parser = ArgumentParser(description=description)

    parser.format_usage = parser.format_help
    subparsers = parser.add_subparsers(title='subcommands',
                                       dest='subcommands')
    subparsers.required = True
    for name, obj in sorted(globals().items()):
        if name.endswith('_parser') and callable(obj):
            obj(subparsers)

    args = parser.parse_args(argv)

    globals()[args.module]()

try:
    sys.exit(main(sys.argv[1:]))
except Exception as e:
    print(e)
    sys.exit(-1)
